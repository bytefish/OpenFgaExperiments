@page "/TaskItem/Edit/{Id:int}"

@namespace RebacExperiments.Blazor.Pages

@using Microsoft.Extensions.Localization
@using RebacExperiments.Blazor.Components
@using RebacExperiments.Blazor.Extensions
@using RebacExperiments.Blazor.Infrastructure
@using RebacExperiments.Blazor.Localization
@using RebacExperiments.Blazor.Shared.Models;
@using RebacExperiments.Shared.ApiSdk;
@using RebacExperiments.Shared.ApiSdk.Models;

@inject ApiClient ApiClient
@inject IStringLocalizer<SharedResource> Loc

<EditForm Model="@CurrentTaskItem" OnValidSubmit="@(async () => await HandleValidSubmitAsync())" FormName="task_item_edit" novalidate>
    <SimpleValidator TModel=TaskItem ValidationFunc="ValidateTaskItem" />
    <FluentValidationSummary />
    <FluentStack Orientation="Orientation.Vertical">
        <div>
            <FluentTextField Name="title" @bind-Value="CurrentTaskItem.Title" Label=@Loc["TaskItem_Title"] Required />
             <FluentValidationMessage For="@(() => CurrentTaskItem.Title)" />
         </div>
         <div>
             <FluentTextArea Name="description" Rows=5 Cols=60 @bind-Value="CurrentTaskItem.Description" Label=@Loc["TaskItem_Description"] Required />
             <FluentValidationMessage For="@(() => CurrentTaskItem.Description)" />
         </div>
         <div>
             <FluentSelect TOption="TaskItemPriorityEnum?" Label=@Loc["TaskItem_TaskItemPriority"] @bind-SelectedOption=@CurrentTaskItem.TaskItemPriority @onchange=HandleTaskItemPriority Required>
                <FluentOption Value="-1">@Loc["TaskItemPriorityEnum_Select"]</FluentOption>
                    @foreach (TaskItemPriorityEnum taskItemPriority in Enum.GetValues<TaskItemPriorityEnum>())
                {
                    <FluentOption Value=@taskItemPriority.ToString() Selected=@(taskItemPriority == CurrentTaskItem.TaskItemPriority)>@Loc[$"TaskItemPriorityEnum_{taskItemPriority.ToString()}"]</FluentOption>
                }
            </FluentSelect>
            <FluentValidationMessage For="@(() => CurrentTaskItem.TaskItemPriority)" />
        </div>
        <div>
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Save Changes</FluentButton>
                <FluentButton Appearance="Appearance.Accent" OnClick="@(async () => await HandleDiscardAsync())">Discard Changes</FluentButton>
            </FluentStack>
        </div>
    </FluentStack>
</EditForm>