// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace RebacExperiments.Shared.ApiSdk.Odata.CreateRelationTuple {
    public class CreateRelationTuplePostRequestBody : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The objectId property</summary>
        public int? ObjectId { get; set; }
        /// <summary>The objectType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectType { get; set; }
#nullable restore
#else
        public string ObjectType { get; set; }
#endif
        /// <summary>The relation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Relation { get; set; }
#nullable restore
#else
        public string Relation { get; set; }
#endif
        /// <summary>The subjectId property</summary>
        public int? SubjectId { get; set; }
        /// <summary>The subjectRelation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubjectRelation { get; set; }
#nullable restore
#else
        public string SubjectRelation { get; set; }
#endif
        /// <summary>The subjectType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubjectType { get; set; }
#nullable restore
#else
        public string SubjectType { get; set; }
#endif
        /// <summary>
        /// Instantiates a new CreateRelationTuplePostRequestBody and sets the default values.
        /// </summary>
        public CreateRelationTuplePostRequestBody() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateRelationTuplePostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateRelationTuplePostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"objectId", n => { ObjectId = n.GetIntValue(); } },
                {"objectType", n => { ObjectType = n.GetStringValue(); } },
                {"relation", n => { Relation = n.GetStringValue(); } },
                {"subjectId", n => { SubjectId = n.GetIntValue(); } },
                {"subjectRelation", n => { SubjectRelation = n.GetStringValue(); } },
                {"subjectType", n => { SubjectType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("objectId", ObjectId);
            writer.WriteStringValue("objectType", ObjectType);
            writer.WriteStringValue("relation", Relation);
            writer.WriteIntValue("subjectId", SubjectId);
            writer.WriteStringValue("subjectRelation", SubjectRelation);
            writer.WriteStringValue("subjectType", SubjectType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
