// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace RebacExperiments.Shared.ApiSdk.Models {
    public class LocalizationRecord : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The languageId property</summary>
        public int? LanguageId { get; set; }
        /// <summary>The lastEditedBy property</summary>
        public int? LastEditedBy { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The rowVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? RowVersion { get; set; }
#nullable restore
#else
        public byte[] RowVersion { get; set; }
#endif
        /// <summary>The validFrom property</summary>
        public DateTimeOffset? ValidFrom { get; set; }
        /// <summary>The validTo property</summary>
        public DateTimeOffset? ValidTo { get; set; }
        /// <summary>The value property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new LocalizationRecord and sets the default values.
        /// </summary>
        public LocalizationRecord() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LocalizationRecord CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LocalizationRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"category", n => { Category = n.GetStringValue(); } },
                {"id", n => { Id = n.GetIntValue(); } },
                {"languageId", n => { LanguageId = n.GetIntValue(); } },
                {"lastEditedBy", n => { LastEditedBy = n.GetIntValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"rowVersion", n => { RowVersion = n.GetByteArrayValue(); } },
                {"validFrom", n => { ValidFrom = n.GetDateTimeOffsetValue(); } },
                {"validTo", n => { ValidTo = n.GetDateTimeOffsetValue(); } },
                {"value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("category", Category);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("languageId", LanguageId);
            writer.WriteIntValue("lastEditedBy", LastEditedBy);
            writer.WriteStringValue("name", Name);
            writer.WriteByteArrayValue("rowVersion", RowVersion);
            writer.WriteDateTimeOffsetValue("validFrom", ValidFrom);
            writer.WriteDateTimeOffsetValue("validTo", ValidTo);
            writer.WriteStringValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
