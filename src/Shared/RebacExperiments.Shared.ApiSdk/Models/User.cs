// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace RebacExperiments.Shared.ApiSdk.Models {
    public class User : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The fullName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The isPermittedToLogon property</summary>
        public bool? IsPermittedToLogon { get; set; }
        /// <summary>The lastEditedBy property</summary>
        public int? LastEditedBy { get; set; }
        /// <summary>The logonName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogonName { get; set; }
#nullable restore
#else
        public string LogonName { get; set; }
#endif
        /// <summary>The preferredName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredName { get; set; }
#nullable restore
#else
        public string PreferredName { get; set; }
#endif
        /// <summary>The rowVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? RowVersion { get; set; }
#nullable restore
#else
        public byte[] RowVersion { get; set; }
#endif
        /// <summary>The validFrom property</summary>
        public DateTimeOffset? ValidFrom { get; set; }
        /// <summary>The validTo property</summary>
        public DateTimeOffset? ValidTo { get; set; }
        /// <summary>
        /// Instantiates a new User and sets the default values.
        /// </summary>
        public User() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static User CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new User();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"fullName", n => { FullName = n.GetStringValue(); } },
                {"id", n => { Id = n.GetIntValue(); } },
                {"isPermittedToLogon", n => { IsPermittedToLogon = n.GetBoolValue(); } },
                {"lastEditedBy", n => { LastEditedBy = n.GetIntValue(); } },
                {"logonName", n => { LogonName = n.GetStringValue(); } },
                {"preferredName", n => { PreferredName = n.GetStringValue(); } },
                {"rowVersion", n => { RowVersion = n.GetByteArrayValue(); } },
                {"validFrom", n => { ValidFrom = n.GetDateTimeOffsetValue(); } },
                {"validTo", n => { ValidTo = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("fullName", FullName);
            writer.WriteIntValue("id", Id);
            writer.WriteBoolValue("isPermittedToLogon", IsPermittedToLogon);
            writer.WriteIntValue("lastEditedBy", LastEditedBy);
            writer.WriteStringValue("logonName", LogonName);
            writer.WriteStringValue("preferredName", PreferredName);
            writer.WriteByteArrayValue("rowVersion", RowVersion);
            writer.WriteDateTimeOffsetValue("validFrom", ValidFrom);
            writer.WriteDateTimeOffsetValue("validTo", ValidTo);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
