// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace RebacExperiments.Shared.ApiSdk.Models {
    public class RelationTuple : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The lastEditedBy property</summary>
        public int? LastEditedBy { get; set; }
        /// <summary>The objectKey property</summary>
        public int? ObjectKey { get; set; }
        /// <summary>The objectNamespace property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectNamespace { get; set; }
#nullable restore
#else
        public string ObjectNamespace { get; set; }
#endif
        /// <summary>The objectRelation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectRelation { get; set; }
#nullable restore
#else
        public string ObjectRelation { get; set; }
#endif
        /// <summary>The rowVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? RowVersion { get; set; }
#nullable restore
#else
        public byte[] RowVersion { get; set; }
#endif
        /// <summary>The subjectKey property</summary>
        public int? SubjectKey { get; set; }
        /// <summary>The subjectNamespace property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubjectNamespace { get; set; }
#nullable restore
#else
        public string SubjectNamespace { get; set; }
#endif
        /// <summary>The subjectRelation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubjectRelation { get; set; }
#nullable restore
#else
        public string SubjectRelation { get; set; }
#endif
        /// <summary>The validFrom property</summary>
        public DateTimeOffset? ValidFrom { get; set; }
        /// <summary>The validTo property</summary>
        public DateTimeOffset? ValidTo { get; set; }
        /// <summary>
        /// Instantiates a new RelationTuple and sets the default values.
        /// </summary>
        public RelationTuple() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RelationTuple CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RelationTuple();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"id", n => { Id = n.GetIntValue(); } },
                {"lastEditedBy", n => { LastEditedBy = n.GetIntValue(); } },
                {"objectKey", n => { ObjectKey = n.GetIntValue(); } },
                {"objectNamespace", n => { ObjectNamespace = n.GetStringValue(); } },
                {"objectRelation", n => { ObjectRelation = n.GetStringValue(); } },
                {"rowVersion", n => { RowVersion = n.GetByteArrayValue(); } },
                {"subjectKey", n => { SubjectKey = n.GetIntValue(); } },
                {"subjectNamespace", n => { SubjectNamespace = n.GetStringValue(); } },
                {"subjectRelation", n => { SubjectRelation = n.GetStringValue(); } },
                {"validFrom", n => { ValidFrom = n.GetDateTimeOffsetValue(); } },
                {"validTo", n => { ValidTo = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("lastEditedBy", LastEditedBy);
            writer.WriteIntValue("objectKey", ObjectKey);
            writer.WriteStringValue("objectNamespace", ObjectNamespace);
            writer.WriteStringValue("objectRelation", ObjectRelation);
            writer.WriteByteArrayValue("rowVersion", RowVersion);
            writer.WriteIntValue("subjectKey", SubjectKey);
            writer.WriteStringValue("subjectNamespace", SubjectNamespace);
            writer.WriteStringValue("subjectRelation", SubjectRelation);
            writer.WriteDateTimeOffsetValue("validFrom", ValidFrom);
            writer.WriteDateTimeOffsetValue("validTo", ValidTo);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
